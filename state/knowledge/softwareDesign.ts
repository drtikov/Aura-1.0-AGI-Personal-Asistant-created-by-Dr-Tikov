// state/knowledge/softwareDesign.ts
import { KnowledgeFact } from '../../types';

export const softwareDesignKnowledge: Omit<KnowledgeFact, 'id' | 'source'>[] = [
  // Design Patterns
  { subject: 'Singleton Pattern', predicate: 'is a', object: 'Creational Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Singleton Pattern', predicate: 'ensures', object: 'a class has only one instance', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Singleton Pattern', predicate: 'provides', object: 'a global point of access to it', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Observer Pattern', predicate: 'is a', object: 'Behavioral Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Observer Pattern', predicate: 'defines', object: 'a one-to-many dependency between objects', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Observer Pattern', predicate: 'notifies', object: 'dependents automatically of any state changes', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Factory Method Pattern', predicate: 'is a', object: 'Creational Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Factory Method Pattern', predicate: 'provides', object: 'an interface for creating objects in a superclass', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Factory Method Pattern', predicate: 'allows', object: 'subclasses to alter the type of objects that will be created', confidence: 1, strength: 1.0, lastAccessed: 0 },

  // Architectural Principles
  { subject: 'SOLID', predicate: 'is an acronym for', object: 'five design principles in object-oriented programming', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Single Responsibility Principle', predicate: 'is part of', object: 'SOLID', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Single Responsibility Principle', predicate: 'states', object: 'a class should have only one reason to change', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Open/Closed Principle', predicate: 'is part of', object: 'SOLID', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Open/Closed Principle', predicate: 'states', object: 'software entities should be open for extension, but closed for modification', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Liskov Substitution Principle', predicate: 'is part of', object: 'SOLID', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Liskov Substitution Principle', predicate: 'states', object: 'objects of a superclass shall be replaceable with objects of its subclasses without breaking the application', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Interface Segregation Principle', predicate: 'is part of', object: 'SOLID', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Interface Segregation Principle', predicate: 'states', object: 'no client should be forced to depend on methods it does not use', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Dependency Inversion Principle', predicate: 'is part of', object: 'SOLID', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Dependency Inversion Principle', predicate: 'states', object: 'high-level modules should not depend on low-level modules; both should depend on abstractions', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'DRY', predicate: 'stands for', object: "Don't Repeat Yourself", confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'DRY', predicate: 'is a principle aimed at', object: 'reducing repetition of software patterns', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'KISS', predicate: 'stands for', object: 'Keep It Simple, Stupid', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'KISS', predicate: 'is a design principle that', object: 'states most systems work best if they are kept simple rather than made complicated', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'YAGNI', predicate: 'stands for', object: "You Ain't Gonna Need It", confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'YAGNI', predicate: 'is a principle that', object: 'states a programmer should not add functionality until deemed necessary', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Strategy Pattern', predicate: 'is a', object: 'Behavioral Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Strategy Pattern', predicate: 'enables selecting', object: 'an algorithm at runtime', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Decorator Pattern', predicate: 'is a', object: 'Structural Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Decorator Pattern', predicate: 'allows behavior to be added to an individual object', object: 'dynamically, without affecting the behavior of other objects from the same class', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Adapter Pattern', predicate: 'is a', object: 'Structural Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Adapter Pattern', predicate: 'allows the interface of an existing class to be used as', object: 'another interface', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Facade Pattern', predicate: 'is a', object: 'Structural Design Pattern', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Facade Pattern', predicate: 'provides a simplified interface to', object: 'a larger body of code, such as a class library', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Microservices Architecture', predicate: 'is an architectural style that', object: 'structures an application as a collection of loosely coupled services', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Monolithic Architecture', predicate: 'is a traditional unified model for', object: 'the design of a software program', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Event-Driven Architecture', predicate: 'is a software architecture paradigm promoting the', object: 'production, detection, consumption of, and reaction to events', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Coupling', predicate: 'is the degree of', object: 'interdependence between software modules', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Low Coupling', predicate: 'is often a sign of a', object: 'well-structured computer system', confidence: 0.95, strength: 1.0, lastAccessed: 0 },
  { subject: 'Cohesion', predicate: 'refers to the degree to which', object: 'the elements inside a module belong together', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'High Cohesion', predicate: 'is often associated with', object: 'desirable software design', confidence: 0.95, strength: 1.0, lastAccessed: 0 },
  { subject: 'Agile', predicate: 'is a', object: 'methodology for software development', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Scrum', predicate: 'is a', object: 'framework for managing work with an emphasis on software development', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Kanban', predicate: 'is a', object: 'method for managing knowledge work with an emphasis on just-in-time delivery', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'Git', predicate: 'is a', object: 'distributed version-control system for tracking changes in source code', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'REST', predicate: 'is an acronym for', object: 'Representational State Transfer', confidence: 1, strength: 1.0, lastAccessed: 0 },
  { subject: 'REST', predicate: 'is an', object: 'architectural style for designing networked applications', confidence: 1, strength: 1.0, lastAccessed: 0 },
];