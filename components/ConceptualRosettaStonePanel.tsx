// components/ConceptualRosettaStonePanel.tsx
import React, { useMemo } from 'react';
import { useArchitectureState, useLocalization, useMemoryState } from '../context/AuraContext.tsx';
import { AnalogicalHypothesisProposal } from '../types';

export const ConceptualRosettaStonePanel = React.memo(() => {
    const { ontogeneticArchitectState } = useArchitectureState();
    const { t } = useLocalization();

    const hypotheses = useMemo(() =>
        ontogeneticArchitectState.proposalQueue.filter(
            (p): p is AnalogicalHypothesisProposal => p.proposalType === 'analogical_hypothesis'
        ).sort((a, b) => b.timestamp - a.timestamp), // Show newest first
    [ontogeneticArchitectState.proposalQueue]);

    return (
        <div className="side-panel">
            <p className="reason-text">
                This panel displays novel hypotheses generated by the Prometheus Engine. The engine autonomously seeks deep structural analogies between disparate mathematical domains to formulate new, potentially groundbreaking, conjectures.
            </p>
            {hypotheses.length === 0 ? (
                <div className="kg-placeholder">No analogical hypotheses have been generated yet.</div>
            ) : (
                hypotheses.map(hypo => (
                    <div key={hypo.id} className="proposal-card">
                        <div className="proposal-card-header">
                            <span className="proposal-type-badge analogical_hypothesis">Analogical Hypothesis</span>
                            <span className="priority-score">Priority: {hypo.priority?.toFixed(2)}</span>
                        </div>
                        <div className="proposal-card-body">
                             <p style={{
                                fontFamily: 'var(--font-heading)',
                                fontSize: '1.1rem',
                                color: 'var(--primary-color)',
                                marginBottom: '0.5rem'
                            }}>
                                {hypo.sourceDomain} â†” {hypo.targetDomain}
                            </p>
                            <p><strong>Analogy:</strong> <em>{hypo.analogy}</em></p>
                            <p style={{marginTop: '0.75rem'}}><strong>Conjecture:</strong> {hypo.conjecture}</p>
                            <div className="code-snippet-container" style={{ marginTop: '1rem', background: 'rgba(0,0,0,0.4)' }}>
                                <pre><code><strong>Reasoning Trace:</strong>{'\n'}{hypo.reasoning}</code></pre>
                            </div>
                        </div>
                    </div>
                ))
            )}
        </div>
    );
});